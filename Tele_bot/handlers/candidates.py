from telebot.types import Message
from database.db import cursor, conn
from handlers.hh_parser import parse_hh_resume

def register_handlers(bot):
    @bot.message_handler(commands=["add_manual"])
    def add_manual_resume(message: Message):
        try:
            args = message.text.replace("/add_manual", "").strip().split(";")
            if len(args) != 5:
                raise ValueError("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

            full_name = args[0].strip()
            position = args[1].strip()
            city = args[2].strip()
            experience = args[3].strip()
            raw_link = args[4].strip()
            
            clean_link = raw_link.split("?")[0].split("#")[0]

            # if "hh.ru/resume/" not in clean_link:
            #     raise ValueError("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å `hh.ru/resume/`")

            cursor.execute(
                "SELECT id FROM manual_resumes WHERE resume_link = ?", 
                (clean_link,)
            )
            if cursor.fetchone():
                return bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ —Ä–µ–∑—é–º–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ!")

            cursor.execute(
                "INSERT INTO manual_resumes (full_name, position, city, experience, resume_link, added_by) VALUES (?, ?, ?, ?, ?, ?)",
                (full_name, position, city, experience, clean_link, message.chat.id)
            )
            conn.commit()
            
            bot.reply_to(message, "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

        except ValueError as ve:
            bot.reply_to(message, str(ve))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")


    @bot.message_handler(commands=["search_manual"])
    def search_manual_resumes(message: Message):
        query = message.text.split(" ", 1)[1] if len(message.text.split()) > 1 else ""
        
        cursor.execute(
            "SELECT * FROM manual_resumes WHERE full_name LIKE ? OR position LIKE ?",
            (f"%{query}%", f"%{query}%")
        )
        resumes = cursor.fetchall()
        
        if not resumes:
            return bot.reply_to(message, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        
        text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        for resume in resumes:
            text += f"‚Ä¢ {resume[1]} ({resume[2]}, {resume[3]})\n–°—Å—ã–ª–∫–∞: {resume[5]}\n\n"
        
        bot.send_message(message.chat.id, text, disable_web_page_preview=True)

    @bot.message_handler(commands=["import_resume"])
    def import_resume_handler(message: Message):
        link = message.text.replace("/import_resume", "").strip()
        
        if "hh.ru/resume/" not in link:
            return bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ —Å HH.ru")
        
        data = parse_hh_resume(link)
        if not data:
            return bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—é–º–µ")
        
        cursor.execute(
            "INSERT INTO manual_resumes (full_name, position, city, experience, resume_link, added_by) VALUES (?, ?, ?, ?, ?, ?)",
            (data["full_name"], data["position"], data["city"], data["experience"], link, message.chat.id)
        )
        conn.commit()
        
        bot.reply_to(message, f"‚úÖ –†–µ–∑—é–º–µ {data['full_name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

    @bot.message_handler(commands=["search_candidate"])
    def search_candidate_handler(message: Message):
        query = message.text.replace("/search_candidate", "").strip()
        
        cursor.execute(
            "SELECT * FROM manual_resumes WHERE full_name LIKE ? OR position LIKE ?",
            (f"%{query}%", f"%{query}%")
        )
        resumes = cursor.fetchall()
        
        if resumes:
            text = "üîç –ù–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ:\n\n"
            for resume in resumes:
                text += f"‚Ä¢ {resume[1]} ({resume[2]}, {resume[3]})\n–°—Å—ã–ª–∫–∞: {resume[5]}\n\n"
            bot.send_message(message.chat.id, text, disable_web_page_preview=True)
        else:
            bot.reply_to(message, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_manual` –∏–ª–∏ `/import_resume`", parse_mode="Markdown")



